stages:
  - lint
  - test
  - build
  - deploy

variables:
  DOCKER_REGISTRY: registry.gitlab.com
  DOCKER_IMAGE_NAME: ${CI_PROJECT_PATH}
  DOCKER_TAG: ${CI_COMMIT_REF_SLUG}
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.pip-cache"

# Cache pip dependencies
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .pip-cache/

# Lint Python code
lint:
  stage: lint
  image: python:3.10-slim   
  script:
    - pip install flake8
    - flake8 .
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH == "main"'

# Run Django tests
test:
  stage: test
  image: python:3.10-slim
  services:
    - postgres:latest
  variables:
    POSTGRES_DB: test_db
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
    DB_NAME: test_db
    DB_USER: postgres
    DB_PASSWORD: postgres
    DB_HOST: postgres
  script:
    - pip install -r requirements.txt
    - python manage.py test
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "develop"'

# Build Docker image
build:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:${DOCKER_TAG} .
    - docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:${DOCKER_TAG}
    # Tag as latest if on main branch
    - if [[ "$CI_COMMIT_BRANCH" == "main" ]]; then
        docker tag ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:${DOCKER_TAG} ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:latest;
        docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:latest;
      fi
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "develop"'

# Deploy to staging
deploy_staging:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$STAGING_SSH_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
  script:
    - ssh $STAGING_SERVER "cd $STAGING_PATH && docker pull ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:${DOCKER_TAG} && docker-compose up -d"
  environment:
    name: staging
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'

# Deploy to production
deploy_production:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$PROD_SSH_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
  script:
    - ssh $PROD_SERVER "cd $PROD_PATH && docker pull ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:latest && docker-compose up -d"
  environment:
    name: production
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
  when: manual