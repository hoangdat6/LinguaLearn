name: build-test-deploy

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
  pull_request:
    branches:
      - main
    paths:
      - 'backend/**'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}



      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_IMAGE_NAME }}:${{ github.sha }}

  test:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ./backend/requirements.txt

      - name: Create .env file
        run: |
          echo "${{ secrets.ENV_FILE_CONTENT }}" > ./backend/.env

      - name: Run tests
        env:
          REDIS_URL: redis://127.0.0.1:6379/1
        run: |
          cd backend
          python manage.py test

  deploy:
    runs-on: ubuntu-latest
    needs: [build, test]
    steps:
      - name: Checkout only docker-compose.yml
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          sparseCheckoutPaths: |
            backend/docker-compose.yml 
            backend/nginx.conf
            
      - name: Create .env for deploy
        run: |
          cat <<EOF > .env
          DOCKER_IMAGE=${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_IMAGE_NAME }}:${{ github.sha }}
          DATABASE_HOST=${{ secrets.DATABASE_HOST }}
          DATABASE_PORT=${{ secrets.DATABASE_PORT }}
          GUNICORN_APP=${{ secrets.GUNICORN_APP }}
          EOF

      - name: Append Django .env to deploy .env
        run: |
          echo "" >> .env
          echo "# Django Environment Variables" >> .env
          echo "${{ secrets.ENV_FILE_CONTENT }}" >> .env

      - name: Start SSH agent and add key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.PROD_SSH_KEY }}

      - name: Copy compose, .env, nginx.conf to server
        run: |
          scp -o StrictHostKeyChecking=no -P ${{ secrets.PROD_SSH_PORT }} backend/docker-compose.yml .env backend/nginx.conf ${{ secrets.PROD_USER }}@${{ secrets.PROD_SERVER }}:${{ secrets.PROD_PATH }}/

      - name: Pull & deploy on server
        run: |
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.PROD_SSH_PORT }} ${{ secrets.PROD_USER }}@${{ secrets.PROD_SERVER }} "
            cd ${{ secrets.PROD_PATH }} &&
            cp nginx.conf /etc/nginx/sites-available/lingualearn &&
            docker restart nginx &&
            docker-compose pull web &&
            docker-compose down &&
            docker-compose up -d --remove-orphans
          "

      - name: Tag latest (only on main)
        if: github.ref == 'refs/heads/main'
        run: |
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.PROD_SSH_PORT }} ${{ secrets.PROD_USER }}@${{ secrets.PROD_SERVER }} "
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }} &&            
            docker tag ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:${{ github.sha }} \
                       ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:latest &&
            docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:latest && 
            docker images --format "{{.Repository}}:{{.Tag}} {{.ID}}" | grep '^${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:' | grep -v ':latest' | awk '{print $2}' | xargs -r docker rmi
          "